// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/3/b/RAM4K.hdl
/**
 * Memory of 4K 16-bit registers.
 * If load is asserted, the value of the register selected by
 * address is set to in; Otherwise, the value does not change.
 * The value of the selected register is emitted by out.
 */
CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    //DMuxear la señal de carga en 8 bloques de RAM mas pequeños en base 
    // a los 3 bits mas significativos de la direccion
    DMux8Way(in=load, sel=address[0..2], a=loadA, b=loadB, c=loadC, d=loadD,
             e=loadE, f=loadF, g=loadG, h=loadH);

    //El bloque de RAM (512 16-bits) es seeleccionado por los otros 9 bits de la direccion
    RAM512(in=in, load=loadA, address=address[3..11], out=ramAOut);
    RAM512(in=in, load=loadB, address=address[3..11], out=ramBOut);
    RAM512(in=in, load=loadC, address=address[3..11], out=ramCOut);
    RAM512(in=in, load=loadD, address=address[3..11], out=ramDOut);
    RAM512(in=in, load=loadE, address=address[3..11], out=ramEOut);
    RAM512(in=in, load=loadF, address=address[3..11], out=ramFOut);
    RAM512(in=in, load=loadG, address=address[3..11], out=ramGOut);
    RAM512(in=in, load=loadH, address=address[3..11], out=ramHOut);

    //Muxear las salidas de los bloques de RAM para seleccionar el correcto
    Mux8Way16(a=ramAOut, b=ramBOut, c=ramCOut, d=ramDOut, e=ramEOut, f=ramFOut,
              g=ramGOut, h=ramHOut, sel= address[0..2], out=out);
}
